#!/usr/bin/perl

use strict;
use warnings;
use File::Copy;
use Getopt::Std;

my $VER_NUM="0.9.2 adapt priority";
my @progpath=split (/\//, $0);
my $PROGNAME=$progpath[-1];

sub print_usage()
{
  print "Usage : $PROGNAME [-Vvh] [-i header] [-s splitter] output_directory file_1.c [file_2.c ...]\n";
  print "\t-V\tverbose\n";
  print "\t-i\tinclude header containing every definition used in methods prototypes\n";
  print "\t-v\tversion number\n";
  print "\t-h\tprint this help\n";
  print "\t-s\tsplitter function called when stealing\n";
  exit ();
}

my %opts = ();

getopts('Vvhi:s:',\%opts) or print_usage();

if ($opts{v})
{
  print "$PROGNAME ver. $VER_NUM\n";
  exit;
}

my $output_directory;

if ((scalar @ARGV < 2) || $opts{h})
{
  print_usage();
} else {
  $output_directory = shift @ARGV;
  if ($opts{V}) {
    print "Output directory set to : $output_directory\n";
  }
  if ($output_directory =~ /\.\//)
  {
    $output_directory = "";
  }
}

if ($opts{i} && $opts{V})
{
  print "Using $opts{i} as Header\n";
}

my $splitter = "splitter";

if ($opts{s})
{
  if ($opts{V}) {
    print "Using $opts{s} as Splitter\n";
  }
  $splitter = $opts{s}
} else {
  if ($opts{V}) {
    print "Using default splitter\n";
  }
}

##########################################################
# Perl trim function to strip whitespace from a string : #
# from http://www.somacon.com/p114.php                   #
##########################################################

# Declare the subroutines
sub trim($);
sub ltrim($);
sub rtrim($);

## Create a test string
# my $string = "  \t  Hello world!   ";
#
## Here is how to output the trimmed text "Hello world!"
# print trim($string)."\n";
# print ltrim($string)."\n";
# print rtrim($string)."\n";

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  $string =~ s/\s+$//;
  return $string;
}
# Left trim function to remove leading whitespace
sub ltrim($)
{
  my $string = shift;
  $string =~ s/^\s+//;
  return $string;
}
# Right trim function to remove trailing whitespace
sub rtrim($)
{
  my $string = shift;
  $string =~ s/\s+$//;
  return $string;
}

######################################

# Copy c2x.c and c2x.h files to output_directory :
print ("Copying c2x.c file to destination directory : ".$output_directory."c2x.c\n");
copy($ENV{'HOME'}."/bin/.c2x.c", $output_directory."c2x.c") or die "Copy failed: $!";
print ("Copying c2x.h file to destination directory : ".$output_directory."c2x.h\n");
copy($ENV{'HOME'}."/bin/.c2x.h", $output_directory."c2x.h") or die "Copy failed: $!";

######################################

my $header_file = $output_directory . "main.h";

if ($opts{V}) {
  print "Generating main header : $header_file . . .";
}

open(HEADER, ">$header_file") or die $!;

print HEADER <<EOP;
/*
 * $header_file.
 *
 * Generated by $PROGNAME version $VER_NUM.
 *
 */

#include <kaapi.h>
#include <stddef.h>

/* GTG ugly stuff : */
extern uint64_t epoc;
EOP

if ($opts{i})
{
  print HEADER "#include \"$opts{i}\"\n";
}

my $input_directory = $ARGV[0];

opendir(DIR, $input_directory);
my @files = readdir(DIR);
closedir(DIR);

my @c_files = grep(/\.c$/,@files);
my @h_files = grep(/\.h$/,@files);

foreach my $file (@c_files)
{
  open(FILEHANDLER, $input_directory . "/" . $file) or die $!;
  while (my $line = <FILEHANDLER>)
  {
    if ($line =~ / METHOD\s*\(.*,\s*(.*)\)\s*\(\s*void\s*\*\s*_this\s*,*(.*)\)/)
    {
      my $function = $1;
      my @args = split (/,/, $2);

      &WriteHeader ($function, @args);
    }
  }
}

if ($opts{V}) {
  print " . . . done\n";
}

# ATM Simply copy each header file in source folder to destination folder without processing :
foreach my $file (@h_files)
{
  if ($opts{V}) {
    print ("Copying header file to destination directory : $file\n");
  }
  copy ($input_directory . "/" . $file, $output_directory . $file) or die "Copy failed: $!";
}


open(HEADER, $header_file) or die $!;

# Unique task name :
my $taskId = 1;

foreach my $file (@c_files)
{
  if ($opts{V}){
    print "Processing file $file to " . $output_directory . $file . " . . .";
  }

  my @splitted_path = split (/\//, $file);
  my $file_out = $output_directory.$splitted_path[$#splitted_path];
  open(FILEHANDLER, $input_directory . "/" . $file) or die $!;
  open(FILEOUT, ">$file_out") or die $!;

  print FILEOUT <<EOP;
/*
 * $file_out.
 *
 * Generated by $PROGNAME version $VER_NUM.
 *
 */
EOP

  while (my $line = <FILEHANDLER>)
  {
    # 1. Suppress DECLARE_DATA :
    # for perl parsing script, need to have this indentation for DECLARE_DATA :
    # DECLARE_DATA {
    #  ...
    # }
    my $nb_cb = 0;
    if($line =~ /DECLARE_DATA\s*{/)
    {
      $nb_cb++;
      while(defined($line = <FILEHANDLER>) && $nb_cb != 0)
      {
        
        if(my @arr = $line =~ /{/g)
        {
          $nb_cb += @arr;
        }

        if(my @arr = $line =~ /}/g)
        {
          $nb_cb -= @arr;
        } else {
          # use volatile qualifier only if the line isn't a comment :
          if (ltrim($line) =~ /^\/\//)
          {
            print FILEOUT ltrim($line) . "\n";
          } else {
            print FILEOUT "volatile " . ltrim($line) . "\n";
          }
        }
      }
    }

    # 2. Change included header :
    elsif($line =~ /#include .cecilia\.h./)
    {
      print FILEOUT "\#include \"$header_file\"\n";
      print FILEOUT "\#include \"c2x.h\"\n";
      # TODO : add splitter_header file in option if user want generic splitter
      # or his own splitter.
      #print FILEOUT "\#include \"$splitter_header\"";
    }

    # 3. Method re-definition and header update :
    elsif ($line =~ / METHOD\s*\(.*,\s*(.*)\)\s*\(\s*void\s*\*\s*_this\s*,*(.*)\)/)
    {
      my $function = $1;
      my @args = split (/,/, $2);


      $line = <FILEHANDLER>;
      if ($line !~ /{/)
      {
        print FILEOUT $line;
      }

      print FILEOUT "void ".$function."_body (void* taskarg)\n"; 
      print FILEOUT "{\n";

      # Function declaration and argument decapsulation :
      if ($#args != -1)
      {
        print FILEOUT "  ".$function."_arg_t* arg0 = (".$function."_arg_t*) taskarg;\n\n";

        foreach my $arg (@args)
        {
          $arg =~ /.*\s\**([A-Za-z_][A-Za-z0-9_]*)/ or die "No match found";
          print FILEOUT " $arg = arg0->$1;\n";
        }
        print FILEOUT "\n";
      } else {
        # No arguments :
      }
    }

    # 4. CALL becomes task :
    # elsif ($line =~ /^\s*CALL\s*\([^,]*,\s*([^,]*),(.*)\)\s*;/)
    elsif ($line =~ /^\s*CALL\s*\([^,]*,\s*(.*)\)\s*;/)
    {
      my @args = split (/,/, $1);
      my $function = $args[0];

      print FILEOUT "#ifdef C2X_USES_TIMING\n";
      print FILEOUT "  tick_t t1_$taskId, t2_$taskId;\n";
      print FILEOUT "  GET_TICK (t1_$taskId);\n";
      print FILEOUT "#endif\n";

      print FILEOUT "  component_call_t* data_$taskId = (component_call_t*) malloc (sizeof (component_call_t));\n";
      print FILEOUT "  ".$function."_arg_t* ".$function."_args = (".$function."_arg_t*) malloc (sizeof (".$function."_arg_t));\n";

      for (my $i = 1; $i <= $#args; $i++)
      {
        #$args[$i] =~ /.*\s\**([A-Za-z_][A-Za-z0-9_]*)/ or die "No match found";
        my $var_name = &Var_Name_Func ($function, $i);
        print FILEOUT "  ".$function."_args->".$var_name." = $args[$i];\n";
      }

      print FILEOUT "  data_".$taskId."->meth = (methode_t) ".$function."_body;\n";
      print FILEOUT "  data_".$taskId."->args = ".$function."_args;\n";
      # TODO : default priority (2) is hardcoded ...
      print FILEOUT "  c2x_push (&work, data_$taskId, 2);\n";

      print FILEOUT "#ifdef C2X_USES_TIMING\n";
      print FILEOUT "  GET_TICK (t2_$taskId);\n";
      print FILEOUT "  wq_time_table[tid].tpush += TICK_RAW_DIFF(t1_$taskId,t2_$taskId);\n";
      print FILEOUT "#endif\n";

      # Increment taskId to guarantee unique task name :
      $taskId++;
    }

    # TODO : CALLMINE need to work almost like CALL!
    # 5. CALLMINE becomes task :
    elsif ($line =~ /^\s*CALLMINE\s*\([^,]*,\s*(.*)\)\s*;/)
    {
      my @args = split (/,/, $1);
      my $function = $args[0];

      # TODO : when will this be freed? at the end of the task in the thief
      # entrypoint!
      print FILEOUT "  ".$function."_arg_t* ".$function."_args = (".$function."_arg_t*) malloc (sizeof (".$function."_arg_t));\n";
      #print FILEOUT "  task_$taskId = kaapi_thread_toptask(thread);\n";
      #print FILEOUT "  kaapi_task_initdfg( task_$taskId, ".$function."_body, kaapi_thread_pushdata(thread, sizeof(".$function."_arg_t)) );\n";
      #print FILEOUT "  ".$function."_args = kaapi_task_getargst( task_$taskId, ".$function."_arg_t );\n";

      for (my $i = 1; $i <= $#args; $i++)
      {
        #$args[$i] =~ /.*\s\**([A-Za-z_][A-Za-z0-9_]*)/ or die "No match found";
        my $var_name = &Var_Name_Func ($function, $i);
        print FILEOUT "  ".$function."_args->".$var_name." = $args[$i];\n";
      }

      print FILEOUT "  kaapi_workqueue_push_one (work, ".$function."_args);\n";
    
      # Increment taskId to guarantee unique task name :
      $taskId++;
    }

    # 6. Normal C line :
    else
    {
      $line =~ s/DATA\.//g;
      print FILEOUT $line;
    }
  }
  print FILEOUT "\n";
  if ($opts{V}){
    print " . . . done\n";
  }
}

sub Var_Name_Func {
  (my $function, my $index) = @_;
  open (HEADER, $header_file);

  while (my $line = <HEADER>)
  {
    if ($line =~ /typedef struct ($function)_arg_t/)
    {
      for (my $j = 0; $j < $index; $j++)
      {
        $line = <HEADER>;
      }
      $line =~ /.*\s\**([A-Za-z_][A-Za-z0-9_]*)/;
      return $1;
    }
  }
}

sub WriteHeader {
  (my $function, my @args) = @_;
  #@args = split (/,/, $arguments);

  print HEADER "\n/**********************************************************************/\n\n";
  print HEADER "/* $function function prototype : */\n\n";

  #if ($#args == -1) {
  #  print HEADER "void ".$function."_body (kaapi_thread_t* thread);\n\n";  
  #} else {
    print HEADER "void ".$function."_body (void* taskarg);\n\n";  
    #}

  if ($#args != -1) {
    print HEADER "/* $function argument structure : */\n\n";
    print HEADER "typedef struct ".$function."_arg_t {\n";

    foreach my $my_arg (@args)
    {
      print HEADER "\t$my_arg;\n";
    }
    print HEADER "} ".$function."_arg_t;\n\n";
  }

}

###################
# Creating main.c #
###################

my $main_template = $ENV{'HOME'}."/bin/.main.c";
my $main_file = $output_directory . "main.c";

if ($opts{V}){
  print "Generating XKaapi entrypoing file : $main_file";
}

open(MAIN_TEMPLATE, "<$main_template") or die "Cannot open $!";
my @contents = (<MAIN_TEMPLATE>);
close(MAIN_TEMPLATE);
open(MAIN_FILE, ">$main_file") or die "Cannot open $!";

my $line;
foreach $line (@contents) {
  $line =~ s/\$splitter/$splitter/g;
  print MAIN_FILE $line;
}

close(MAIN_FILE);

if ($opts{V}){
  print " . . . done\n";
}
